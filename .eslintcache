[{"/home/truong5x/Documents/datn/dapp/src/reportWebVitals.js":"1","/home/truong5x/Documents/datn/dapp/src/App.js":"2","/home/truong5x/Documents/datn/dapp/src/views/Dapp1.js":"3","/home/truong5x/Documents/datn/dapp/src/views/Dapp2.js":"4","/home/truong5x/Documents/datn/dapp/src/index.js":"5","/home/truong5x/Documents/datn/dapp/src/sdk/TK1/frontend.js":"6","/home/truong5x/Documents/datn/dapp/src/sdk/TK2/frontend.js":"7"},{"size":362,"mtime":1608510781543,"results":"8","hashOfConfig":"9"},{"size":593,"mtime":1608519432783,"results":"10","hashOfConfig":"9"},{"size":12478,"mtime":1608622279792,"results":"11","hashOfConfig":"9"},{"size":11809,"mtime":1608621893859,"results":"12","hashOfConfig":"9"},{"size":500,"mtime":1608510781543,"results":"13","hashOfConfig":"9"},{"size":7632,"mtime":1608596038000,"results":"14","hashOfConfig":"9"},{"size":7632,"mtime":1608596048000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ud474s",{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/truong5x/Documents/datn/dapp/src/reportWebVitals.js",[],"/home/truong5x/Documents/datn/dapp/src/App.js",["32","33"],"import logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Dapp1 from './views/Dapp1'\nimport Dapp2 from './views/Dapp2'\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n\n    <Router>\n\n      <Switch>\n        <Route path=\"/dapp1\">\n          <Dapp1 />\n        </Route>\n        <Route path=\"/dapp2\">\n          <Dapp2 />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n\n    </Router>\n  );\n}\nconst Home = props => {\n  return \"home\"\n}\n\nexport default App;\n","/home/truong5x/Documents/datn/dapp/src/views/Dapp1.js",["34","35","36","37","38","39","40"],"import React, { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport { Row, Col, Card, Divider, Input, Form, Button, Select } from 'antd'\n\nimport token from \"../sdk/TK1/frontend\"\n\nconst tokenSymbol = \"TK1\"\nconst { Option } = Select;\n\n\nconst Dapp1 = (props) => {\n    const [acc, setAcc] = useState(\"\")\n    const [eth, setETH] = useState(0)\n    const [balance, setBalance] = useState(0)\n    const [contract, setContract] = useState(null)\n    const [decimal, setDecimal] = useState(0)\n    const [receiver, setReceiver] = useState(\"\")\n    const [amount, setAmount] = useState(\"\")\n    const [receiver2, setReceiver2] = useState(\"\")\n    const [listToken, setListToken] = useState([])\n    const [selectedSwapToken, setSelectedSwapToken] = useState(\"\")\n    const [amount2, setAmount2] = useState(0)\n    const [listSend, setListSend] = useState([]);\n    const [listReceiver, setListReceiver] = useState([]);\n\n    useEffect(() => {\n        const enable = ethEnabled()\n        if (enable) {\n            window.web3.eth.getAccounts().then(res => {\n                console.log(\"ðŸš€ ~ file: Dapp1.js ~ line 11 ~ useEffect ~ res\", res)\n                setAcc(res[0])\n\n                window.web3.eth.getBalance(res[0])\n                    .then(res1 => {\n                        console.log(\"ðŸš€ ~ file: Dapp1.js ~ line 16 ~ window.web3.eth.getAccounts ~ res1\", res1)\n                        setETH(window.web3.utils.fromWei(res1))\n                    })\n                const tkContract = new token(window.web3)\n                setContract(tkContract)\n                tkContract.balanceOf(res[0])\n                    .then(tkBalance => {\n                        console.log(\"ðŸš€ ~ file: Dapp1.js ~ line 28 ~ window.web3.eth.getAccounts ~ tkBalance\", tkBalance)\n                        tkContract.decimals()\n                            .then(decimal => {\n                                setDecimal(decimal);\n                                setBalance(tkBalance / Math.pow(10, decimal))\n                            })\n                    })\n\n                tkContract.getListVchainToken()\n                    .then(res => {\n                        setListToken(res.slice(1, res.length).filter(i => i != tokenSymbol))\n                    })\n                tkContract.getListSwap()\n                    .then(res2 => {\n                        const temp = res2.slice(1, res2.length).filter(i => {\n                            if (i.tkApay != tokenSymbol) return false;\n                            if (i.userA != res[0]) return false\n                            return true\n                        })\n                        setListSend(temp)\n                        const temp2 = res2.slice(1, res2.length).filter(i => {\n                            if (i.tkAwant != tokenSymbol) return false;\n                            if (i.userB != res[0]) return false\n                            return true\n                        })\n                        setListReceiver(temp2)\n                        console.log(temp2)\n                    })\n            })\n        }\n    }, [])\n\n\n    const ethEnabled = () => {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n\n            window.ethereum.enable();\n            return true;\n        }\n        return false;\n    }\n\n    const onChangeReceiver = (e) => {\n        setReceiver(e.target.value)\n    }\n\n    const onChangeReceiver2 = (e) => {\n        setReceiver2(e.target.value)\n    }\n\n    const onChangeAmount = (e) => {\n        setAmount(e.target.value)\n    }\n\n    const onChangeAmount2 = (e) => {\n        setAmount2(e.target.value)\n    }\n\n    const onSendToken = e => {\n        console.log(receiver, amount * Math.pow(10, decimal))\n        contract.transfer(receiver, amount * Math.pow(10, decimal) + \"\", acc)\n            .then(res => {\n                console.log(res)\n                alert(\"transfer success\")\n            })\n    }\n\n    const onSelectToken = e => {\n        console.log(e)\n        setSelectedSwapToken(e)\n    }\n    const onCreateSwapRequest = (e) => {\n        contract.userCreateSwap(receiver2, selectedSwapToken, amount2 * Math.pow(10, decimal) + \"\", acc)\n            .then(res => {\n                console.log(res)\n                alert('create request swap success')\n            })\n    }\n\n    const onExecSwap = (e) => {\n        contract.useAcceptSwap(e.userA, acc)\n            .then(res => {\n                console.log(res)\n                alert(\"swap success\")\n            })\n    }\n\n    const onDenySwap = (e) => {\n        contract.userDenySwap(e.userA, acc)\n            .then(res => {\n                console.log(res)\n                alert(\"deny swap success\")\n            })\n    }\n\n    const onDeleteSwap = (e) => {\n        contract.userDeleteSwap(e.userB, e.tkAwant, acc)\n            .then(res => {\n                console.log(res)\n                alert('delete swap success')\n            })\n    }\n\n    return <React.Fragment>\n        <Row>\n\n            <Col span={6}>\n            </Col>\n            <Col span={12}>\n                <Card>\n                    <h2>Token {tokenSymbol}</h2>\n                    <Divider />\n                    <div>\n                        Current account: {acc}\n                    </div>\n                    <Divider />\n                    <Row>\n                        <Col span={12}>\n                            <div className=\"text-center\">\n                                <img width=\"50px\" height=\"50px\" src=\"images/eth_logo.svg\" />\n                            </div>\n                            <div className=\"text-center\">\n                                <h3>{eth} ETH</h3>\n                            </div>\n                        </Col>\n                        <Col span={12}>\n\n                            <div className=\"text-center\">\n                                <img width=\"50px\" height=\"50px\" src=\"images/no-image.png\" />\n                            </div>\n                            <div className=\"text-center\">\n                                <h3>{balance} {tokenSymbol}</h3>\n                            </div>\n                        </Col>\n\n                    </Row>\n\n                    <Divider />\n                    <br />\n                    <div>\n                        <h4> Send inside {tokenSymbol}</h4>\n                        <Row>\n                            <Col md={16} className=\"pr-1\">\n                                <Form.Item\n                                    label=\"Receiver\"\n                                    name=\"receiver\"\n                                >\n                                    <Input\n                                        placeholder=\"Receiver's address\"\n                                        value={receiver}\n                                        onChange={onChangeReceiver}\n                                    />\n                                </Form.Item>\n\n                            </Col>\n                            <Col md={8}>\n                                <Form.Item\n                                    label={`Amount ${tokenSymbol}`}\n                                    name=\"amount\"\n                                >\n                                    <Input\n                                        placeholder={`${tokenSymbol} to send`}\n                                        type=\"number\"\n                                        value={amount}\n                                        onChange={onChangeAmount}\n                                    />\n                                </Form.Item>\n\n                            </Col>\n\n                        </Row>\n                        <Button\n                            type=\"primary\"\n                            onClick={onSendToken}>\n                            Send {amount} {tokenSymbol}\n                        </Button>\n                    </div>\n                    <Divider />\n                    <br />\n                    <h4> Swap  {selectedSwapToken ? `vs ${selectedSwapToken}` : ` token`}</h4>\n                    <Row>\n                        <Col md={16}>\n                            <Form.Item\n                                label=\"Receiver\"\n                                name=\"receiver2\"\n                            >\n                                <Input\n                                    placeholder=\"Address to swap token\"\n                                    value={receiver2}\n                                    onChange={onChangeReceiver2}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col md={8} className=\"pl-2\" >\n                            <Select\n                                placeholder=\"Token to swap\"\n                                style={{ width: \"100%\" }}\n                                onSelect={onSelectToken}>\n                                {listToken.map((i, idx) => <Option value={i} key={idx}>\n                                    {i}\n                                </Option>)}\n                            </Select>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12}>\n                            <Form.Item\n                                label=\"Amount\"\n                                name=\"amount2\"\n                            >\n                                <Input\n                                    placeholder={`Amount token ${selectedSwapToken} want to have`}\n                                    value={amount2}\n                                    onChange={onChangeAmount2}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Button\n                        type=\"primary\"\n                        onClick={onCreateSwapRequest}\n                    >\n                        Reques to swap\n                    </Button>\n                    <Divider />\n                    <br />\n                    <h4>My list send request swap</h4>\n                    {\n                        listSend.map((i, idx) => <Card key={idx}>\n                            <div className=\"d-flex justify-content-between\">\n                                <div>\n                                    To:  {i.userB}\n                                </div>\n                                <div>\n                                    <div> To get token {i.tkAwant}</div>\n                                    <div>Value {i.value}</div>\n                                </div>\n                                <div>\n                                    <Button\n                                        danger\n                                        onClick={() => onDeleteSwap(i)}>\n                                        Remove request\n                                    </Button>\n                                </div>\n                            </div>\n\n                        </Card>)\n                    }\n\n                    <Divider />\n                    <br />\n\n                    <h4>My list request swap incoming </h4>\n                    {\n                        listReceiver.map((i, idx) => <Card key={idx}>\n                            <div className=\"d-flex justify-content-between\">\n                                <div>\n                                    <div> From:  {i.userA}</div>\n                                    <div>Value {i.value}</div>\n                                </div>\n                                <div>\n                                    Pay by token {i.tkApay}\n                                </div>\n                                <div>\n                                    <Button\n                                        onClick={() => onExecSwap(i)}\n                                        className=\"mr-2\"\n                                        type=\"primary\"\n                                    >\n                                        Swap\n                                    </Button>\n                                    <Button\n                                        onClick={() => onDenySwap(i)}\n                                        danger>\n                                        Deny\n                                    </Button>\n                                </div>\n\n                            </div>\n\n                        </Card>)\n                    }\n\n                </Card>\n\n            </Col>\n\n        </Row>\n\n    </React.Fragment>\n}\nexport default Dapp1","/home/truong5x/Documents/datn/dapp/src/views/Dapp2.js",["41","42","43","44","45","46","47"],"/home/truong5x/Documents/datn/dapp/src/index.js",[],"/home/truong5x/Documents/datn/dapp/src/sdk/TK1/frontend.js",[],"/home/truong5x/Documents/datn/dapp/src/sdk/TK2/frontend.js",[],{"ruleId":"48","severity":1,"message":"49","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":12},{"ruleId":"48","severity":1,"message":"52","line":7,"column":3,"nodeType":"50","messageId":"51","endLine":7,"endColumn":7},{"ruleId":"53","severity":1,"message":"54","line":52,"column":77,"nodeType":"55","messageId":"56","endLine":52,"endColumn":79},{"ruleId":"53","severity":1,"message":"54","line":57,"column":42,"nodeType":"55","messageId":"56","endLine":57,"endColumn":44},{"ruleId":"53","severity":1,"message":"54","line":58,"column":41,"nodeType":"55","messageId":"56","endLine":58,"endColumn":43},{"ruleId":"53","severity":1,"message":"54","line":63,"column":43,"nodeType":"55","messageId":"56","endLine":63,"endColumn":45},{"ruleId":"53","severity":1,"message":"54","line":64,"column":41,"nodeType":"55","messageId":"56","endLine":64,"endColumn":43},{"ruleId":"57","severity":1,"message":"58","line":162,"column":33,"nodeType":"59","endLine":162,"endColumn":93},{"ruleId":"57","severity":1,"message":"58","line":171,"column":33,"nodeType":"59","endLine":171,"endColumn":93},{"ruleId":"53","severity":1,"message":"54","line":53,"column":77,"nodeType":"55","messageId":"56","endLine":53,"endColumn":79},{"ruleId":"53","severity":1,"message":"54","line":58,"column":42,"nodeType":"55","messageId":"56","endLine":58,"endColumn":44},{"ruleId":"53","severity":1,"message":"54","line":59,"column":41,"nodeType":"55","messageId":"56","endLine":59,"endColumn":43},{"ruleId":"53","severity":1,"message":"54","line":64,"column":43,"nodeType":"55","messageId":"56","endLine":64,"endColumn":45},{"ruleId":"53","severity":1,"message":"54","line":65,"column":41,"nodeType":"55","messageId":"56","endLine":65,"endColumn":43},{"ruleId":"57","severity":1,"message":"58","line":155,"column":33,"nodeType":"59","endLine":155,"endColumn":93},{"ruleId":"57","severity":1,"message":"58","line":164,"column":33,"nodeType":"59","endLine":164,"endColumn":93},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]