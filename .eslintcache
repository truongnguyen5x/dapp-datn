[{"D:\\datn\\dapp-datn1\\src\\App.js":"1","D:\\datn\\dapp-datn1\\src\\views\\Dapp.js":"2","D:\\datn\\dapp-datn1\\src\\sdk\\index.js":"3","D:\\datn\\dapp-datn1\\src\\reportWebVitals.js":"4","D:\\datn\\dapp-datn2\\src\\views\\Dapp.js":"5","D:\\datn\\dapp-datn2\\src\\reportWebVitals.js":"6","D:\\datn\\dapp-datn2\\src\\sdk\\index.js":"7","D:\\datn\\dapp-datn2\\src\\App.js":"8"},{"size":411,"mtime":1609893488126,"results":"9","hashOfConfig":"10"},{"size":15134,"mtime":1611209335199,"results":"11","hashOfConfig":"10"},{"size":8854,"mtime":1611184836000,"results":"12","hashOfConfig":"10"},{"size":375,"mtime":1609889870796,"results":"13","hashOfConfig":"10"},{"size":14233,"mtime":1610872839822,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1609889870796,"results":"16","hashOfConfig":"15"},{"size":11532,"mtime":1611175942000,"results":"17","hashOfConfig":"15"},{"size":411,"mtime":1610872839822,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"17j1t0z",{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1tmf77y",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\datn\\dapp-datn1\\src\\App.js",["37","38"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport Dapp from './views/Dapp'\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <Router>\r\n\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          <Dapp />\r\n        </Route>\r\n      </Switch>\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","D:\\datn\\dapp-datn1\\src\\views\\Dapp.js",["39","40","41","42","43","44","45"],"import React, { useState, useEffect } from 'react'\r\nimport Web3 from 'web3'\r\nimport { Row, Col, Card, Divider, Input, Form, Button, Select } from 'antd'\r\n\r\nimport token from \"../sdk/index\"\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nconst Dapp1 = () => {\r\n    const [tokenSymbol, setTokenSymbol] = useState('')\r\n    const [acc, setAcc] = useState(\"\")\r\n    const [eth, setETH] = useState(0)\r\n    const [balance, setBalance] = useState(0)\r\n    const [contract, setContract] = useState(null)\r\n    const [decimal, setDecimal] = useState(0)\r\n    const [receiver, setReceiver] = useState(\"\")\r\n    const [amount, setAmount] = useState(\"\")\r\n    const [receiver2, setReceiver2] = useState(\"\")\r\n    const [listToken, setListToken] = useState([])\r\n    const [selectedSwapToken, setSelectedSwapToken] = useState(\"\")\r\n    const [amount2, setAmount2] = useState(0)\r\n    const [listSend, setListSend] = useState([]);\r\n    const [listReceiver, setListReceiver] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const enable = ethEnabled()\r\n        if (enable) {\r\n            fetchData()\r\n        }\r\n    }, [])\r\n\r\n    const fetchData = async () => {\r\n        const tkContract = new token(window.web3)\r\n        setContract(tkContract)\r\n        const listAccMetamask = await window.web3.eth.getAccounts();\r\n        setAcc(listAccMetamask[0])\r\n        const symbol = await tkContract.symbol()\r\n        tkContract.getListVchainToken()\r\n            .then(res2 => {\r\n                setListToken(res2.slice(1, res2.length).filter(i => i != symbol))\r\n            })\r\n        setTokenSymbol(symbol)\r\n        const decimal = await tkContract.decimals()\r\n        setDecimal(decimal)\r\n\r\n        window.web3.eth.getBalance(listAccMetamask[0])\r\n            .then(res1 => {\r\n                // console.log(\"ðŸš€ ~ file: Dapp1.js ~ line 16 ~ window.web3.eth.getAccounts ~ res1\", res1)\r\n                setETH(window.web3.utils.fromWei(res1))\r\n            })\r\n\r\n        tkContract.balanceOf(listAccMetamask[0])\r\n            .then(tkBalance => {\r\n                // console.log(\"ðŸš€ ~ file: Dapp1.js ~ line 28 ~ window.web3.eth.getAccounts ~ tkBalance\", tkBalance)\r\n                setBalance(tkBalance / Math.pow(10, decimal))\r\n            })\r\n\r\n        tkContract.getListSwap()\r\n            .then(res2 => {\r\n                // console.log(res2)\r\n                const temp = res2.slice(1, res2.length).filter(i => {\r\n                    if (i.tkApay != symbol) return false;\r\n                    if (i.userA != listAccMetamask[0]) return false\r\n                    return true\r\n                })\r\n                setListSend(temp)\r\n                const temp2 = res2.slice(1, res2.length).filter(i => {\r\n                    if (i.tkAwant != symbol) return false;\r\n                    if (i.userB != listAccMetamask[0]) return false\r\n                    return true\r\n                })\r\n                setListReceiver(temp2)\r\n                // console.log(temp2)\r\n            })\r\n\r\n        window.ethereum.on('accountsChanged', (accounts) => {\r\n            setAcc(accounts[0])\r\n            tkContract.balanceOf(accounts[0])\r\n                .then(tkBalance => {\r\n                    // console.log(\"ðŸš€ ~ file: Dapp1.js ~ line 28 ~ window.web3.eth.getAccounts ~ tkBalance\", tkBalance)\r\n                    setBalance(tkBalance / Math.pow(10, decimal))\r\n                })\r\n            window.web3.eth.getBalance(accounts[0])\r\n                .then(e => {\r\n                    setETH(window.web3.utils.fromWei(e))\r\n                })\r\n        });\r\n\r\n        window.ethereum.on('chainChanged', (chainId) => {\r\n            // setNetId(res.utils.hexToNumber(chainId))\r\n            window.web3.eth.getAccounts().then(listAcc => {\r\n                window.web3.eth.getBalance(listAcc[0])\r\n                    .then(e => {\r\n                        setETH(window.web3.utils.fromWei(e))\r\n                    })\r\n\r\n                tkContract.balanceOf(listAcc[0])\r\n                    .then(tkBalance => {\r\n                        // console.log(\"ðŸš€ ~ file: Dapp1.js ~ line 28 ~ window.web3.eth.getAccounts ~ tkBalance\", tkBalance)\r\n                        setBalance(tkBalance / Math.pow(10, decimal))\r\n                    })\r\n            })\r\n        });\r\n    }\r\n\r\n    const ethEnabled = () => {\r\n        if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum);\r\n            window.ethereum.enable();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const onChangeReceiver = (e) => {\r\n        setReceiver(e.target.value)\r\n    }\r\n\r\n    const onChangeReceiver2 = (e) => {\r\n        setReceiver2(e.target.value)\r\n    }\r\n\r\n    const onChangeAmount = (e) => {\r\n        setAmount(e.target.value)\r\n    }\r\n\r\n    const onChangeAmount2 = (e) => {\r\n        setAmount2(e.target.value)\r\n    }\r\n\r\n\r\n\r\n    const onSendToken = async e => {\r\n        // console.log(receiver, amount * Math.pow(10, decimal))\r\n        contract.transfer(receiver, amount * Math.pow(10, decimal) + \"\", acc)\r\n        .then()\r\n        .catch(err => {\r\n            alert(err)\r\n        })\r\n        // alert(\"transfer success\"      \r\n    }\r\n\r\n    const onSelectToken = e => {\r\n        // console.log(e)\r\n        setSelectedSwapToken(e)\r\n    }\r\n    const onCreateSwapRequest = (e) => {\r\n        contract.userCreateSwap(receiver2, selectedSwapToken, amount2 * Math.pow(10, decimal) + \"\", acc)\r\n            .then(res => {\r\n                console.log(res)\r\n                // alert('create request swap success')\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n    }\r\n\r\n    const onExecSwap = (e) => {\r\n        contract.useAcceptSwap(e.userA, acc)\r\n            .then(res => {\r\n                console.log(res)\r\n                // alert(\"swap success\")\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n    }\r\n\r\n    const onDenySwap = (e) => {\r\n        contract.userDenySwap(e.userA, acc)\r\n            .then(res => {\r\n                console.log(res)\r\n                // alert(\"deny swap success\")\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n    }\r\n\r\n    const onDeleteSwap = (e) => {\r\n        contract.userDeleteSwap(e.userB, e.tkAwant, acc)\r\n            .then(res => {\r\n                console.log(res)\r\n                // alert('delete swap success')\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <Row>\r\n\r\n            <Col span={6}>\r\n            </Col>\r\n            <Col span={12}>\r\n                <Card>\r\n                    <h2>Token {tokenSymbol}</h2>\r\n                    <Divider />\r\n                    <div>\r\n                        Current account: {acc}\r\n                    </div>\r\n                    <Divider />\r\n                    <Row>\r\n                        <Col span={12}>\r\n                            <div className=\"text-center\">\r\n                                <img width=\"50px\" height=\"50px\" src=\"images/eth_logo.svg\" />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <h3>{eth} ETH</h3>\r\n                            </div>\r\n                        </Col>\r\n                        <Col span={12}>\r\n\r\n                            <div className=\"text-center\">\r\n                                <img width=\"50px\" height=\"50px\" src=\"images/no-image.png\" style={{ borderRadius: '50%' }} />\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <h3>{balance} {tokenSymbol}</h3>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n\r\n                    <Divider />\r\n                    <br />\r\n                    <div>\r\n                        <h4> Send inside {tokenSymbol}</h4>\r\n                        <Row >\r\n                            <Col md={16} className=\"pr-1\">\r\n                                <Form.Item\r\n                                    label=\"Receiver\"\r\n                                    name=\"receiver\"\r\n                                    className=\"mb-1\"\r\n                                >\r\n                                    <Input\r\n                                        placeholder=\"Receiver's address\"\r\n                                        value={receiver}\r\n                                        onChange={onChangeReceiver}\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                            </Col>\r\n                            <Col md={8}>\r\n                                {/* <Form.Item\r\n                                    label={`Amount ${tokenSymbol}`}\r\n                                    name=\"amount\"\r\n                                > */}\r\n                                <Input\r\n                                    placeholder={`${tokenSymbol} to send`}\r\n                                    type=\"number\"\r\n                                    value={amount}\r\n                                    onChange={onChangeAmount}\r\n                                />\r\n                                {/* </Form.Item> */}\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={onSendToken}>\r\n                            Send {amount} {tokenSymbol}\r\n                        </Button>\r\n                    </div>\r\n                    {listToken.length > 0 && <React.Fragment>\r\n\r\n                        <Divider />\r\n                        <br />\r\n                        <h4> Swap  {selectedSwapToken ? `vs ${selectedSwapToken}` : ` token`}</h4>\r\n                        <Row>\r\n                            <Col md={16}>\r\n                                <Form.Item\r\n                                    label=\"Receiver\"\r\n                                    name=\"receiver2\"\r\n                                    className=\"mb-1\"\r\n                                >\r\n                                    <Input\r\n                                        placeholder=\"Address to swap token\"\r\n                                        value={receiver2}\r\n                                        onChange={onChangeReceiver2}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col md={8} className=\"pl-2\" >\r\n                                <Select\r\n                                    placeholder=\"Token to swap\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onSelect={onSelectToken}>\r\n                                    {listToken.map((i, idx) => <Option value={i} key={idx}>\r\n                                        {i}\r\n                                    </Option>)}\r\n                                </Select>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <Form.Item\r\n                                    label=\"Amount\"\r\n                                    name=\"amount2\"\r\n                                    className=\"mb-1\"\r\n                                >\r\n                                    <Input\r\n                                        placeholder={`Amount token ${selectedSwapToken} want to have`}\r\n                                        value={amount2}\r\n                                        onChange={onChangeAmount2}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={onCreateSwapRequest}\r\n                        >\r\n                            Reques to swap\r\n                    </Button>\r\n                        <Divider />\r\n                        <br />\r\n                        <h4>My list send request swap</h4>\r\n                        {\r\n                            listSend.map((i, idx) => <Card key={idx}>\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <div>\r\n                                        <div>\r\n                                            To:  {i.userB}\r\n                                        </div>\r\n                                        <div>\r\n                                            <div> To get token {i.tkAwant}</div>\r\n                                            <div>Value {i.value}</div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <Button\r\n                                            danger\r\n                                            onClick={() => onDeleteSwap(i)}>\r\n                                            Remove request\r\n                                    </Button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Card>)\r\n                        }\r\n\r\n                        <Divider />\r\n                        <br />\r\n\r\n                        <h4>My list request swap incoming </h4>\r\n                        {\r\n                            listReceiver.map((i, idx) => <Card key={idx}>\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <div>\r\n                                        <div>\r\n                                            <div> From:  {i.userA}</div>\r\n                                            <div>Value {i.value}</div>\r\n                                        </div>\r\n                                        <div>\r\n                                            Pay by token {i.tkApay}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <Button\r\n                                            onClick={() => onExecSwap(i)}\r\n                                            className=\"mr-2\"\r\n                                            type=\"primary\"\r\n                                        >\r\n                                            Swap\r\n                                    </Button>\r\n                                        <Button\r\n                                            onClick={() => onDenySwap(i)}\r\n                                            danger>\r\n                                            Deny\r\n                                    </Button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Card>)\r\n                        }\r\n\r\n\r\n                    </React.Fragment>\r\n\r\n                    }\r\n\r\n                </Card>\r\n\r\n            </Col>\r\n\r\n        </Row>\r\n\r\n    </React.Fragment>\r\n}\r\nexport default Dapp1","D:\\datn\\dapp-datn1\\src\\sdk\\index.js",[],"D:\\datn\\dapp-datn1\\src\\reportWebVitals.js",[],"D:\\datn\\dapp-datn2\\src\\views\\Dapp.js",["46","47","48","49","50","51","52"],"D:\\datn\\dapp-datn2\\src\\reportWebVitals.js",[],"D:\\datn\\dapp-datn2\\src\\sdk\\index.js",[],"D:\\datn\\dapp-datn2\\src\\App.js",["53","54"],{"ruleId":"55","severity":1,"message":"56","line":1,"column":8,"nodeType":"57","messageId":"58","endLine":1,"endColumn":12},{"ruleId":"55","severity":1,"message":"59","line":7,"column":3,"nodeType":"57","messageId":"58","endLine":7,"endColumn":7},{"ruleId":"60","severity":1,"message":"61","line":41,"column":71,"nodeType":"62","messageId":"63","endLine":41,"endColumn":73},{"ruleId":"60","severity":1,"message":"61","line":63,"column":34,"nodeType":"62","messageId":"63","endLine":63,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":64,"column":33,"nodeType":"62","messageId":"63","endLine":64,"endColumn":35},{"ruleId":"60","severity":1,"message":"61","line":69,"column":35,"nodeType":"62","messageId":"63","endLine":69,"endColumn":37},{"ruleId":"60","severity":1,"message":"61","line":70,"column":33,"nodeType":"62","messageId":"63","endLine":70,"endColumn":35},{"ruleId":"64","severity":1,"message":"65","line":208,"column":33,"nodeType":"66","endLine":208,"endColumn":93},{"ruleId":"64","severity":1,"message":"65","line":217,"column":33,"nodeType":"66","endLine":217,"endColumn":125},{"ruleId":"60","severity":1,"message":"61","line":41,"column":71,"nodeType":"62","messageId":"63","endLine":41,"endColumn":73},{"ruleId":"60","severity":1,"message":"61","line":63,"column":34,"nodeType":"62","messageId":"63","endLine":63,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":64,"column":33,"nodeType":"62","messageId":"63","endLine":64,"endColumn":35},{"ruleId":"60","severity":1,"message":"61","line":69,"column":35,"nodeType":"62","messageId":"63","endLine":69,"endColumn":37},{"ruleId":"60","severity":1,"message":"61","line":70,"column":33,"nodeType":"62","messageId":"63","endLine":70,"endColumn":35},{"ruleId":"64","severity":1,"message":"65","line":194,"column":33,"nodeType":"66","endLine":194,"endColumn":93},{"ruleId":"64","severity":1,"message":"65","line":203,"column":33,"nodeType":"66","endLine":203,"endColumn":125},{"ruleId":"55","severity":1,"message":"56","line":1,"column":8,"nodeType":"57","messageId":"58","endLine":1,"endColumn":12},{"ruleId":"55","severity":1,"message":"59","line":7,"column":3,"nodeType":"57","messageId":"58","endLine":7,"endColumn":7},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]